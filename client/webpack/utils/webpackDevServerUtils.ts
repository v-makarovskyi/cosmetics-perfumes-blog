import path, { resolve } from "path";
import fs from "fs";

import chalk from "chalk";
import { detect } from "detect-port";
import forkTsCheckerWebpackPlugin from "fork-ts-checker-webpack-plugin";
import isRoot from "is-root";
import prompts from "prompts";
import url from "node:url";

import { appPaths } from "../config/paths";
import { formatWebpackMessages } from "./formatWebpackMessages";
import { getProcessForPort } from "./getProcessForPort";
import { getIp } from "./getIp";

import type {
  CreateCompilerFuncPropsType,
  AppCompiller,
  PromptsObjectType,
} from "../../types/webpack.types";

const isInteractive: boolean = process.stdout.isTTY;

function prepareUrls(
  protocol: string,
  host: string,
  port: number,
  pathname = "/"
) {
  const formatUrl = (hostname: string) => {
    return url.format({
      protocol,
      hostname,
      port,
      pathname,
    });
  };
  const prettyPrintUrl = (hostname: string) => {
    return url.format({
      protocol,
      hostname,
      port: chalk.bold(port),
      pathname,
    });
  };

  const isHostNotDefined = host === "0.0.0.0" || host === "::";
  let prettyHost: string,
    lanUrlForConfig: string | undefined,
    lanUrlForTerminal: string | undefined;

  if (isHostNotDefined) {
    prettyHost = "localhost";
    try {
      lanUrlForConfig = getIp();
      if (lanUrlForConfig) {
        if (
          /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(
            lanUrlForConfig
          )
        ) {
          lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig);
        }
      } else {
        lanUrlForConfig = undefined;
      }
    } catch (error) {
      //ignore
    }
  } else {
    prettyHost = host;
  }

  const localUrlForTerminal = prettyPrintUrl(prettyHost);
  const localUrlForBrowser = formatUrl(prettyHost);

  return {
    lanUrlForConfig,
    lanUrlForTerminal,
    localUrlForBrowser,
    localUrlForTerminal,
  };
}

function printInstruction(appName: string, urls: { [x: string]: string }) {
  console.log();
  console.log(
    `üî≠ –¢–µ–ø–µ—Ä—å ${chalk.bold(appName)} –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç–∏–≤–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ üî≠`
  );
  console.log();
  console.log(
    `  üè† ${chalk.bold.blue("–õ–æ–∫–∞–ª—å–Ω–æ: ")}       ${urls.localUrlForTerminal}`
  );
  console.log(
    `  üì° ${chalk.bold.blue("–í –≤–∞—à–µ–π —Å–µ—Ç–∏: ")}   ${urls.lanUrlForTerminal}`
  );
  console.log();
  console.log(
    `üîî –ö—Å—Ç–∞—Ç–∏, —Å–±–æ—Ä–∫–∞ –¥–ª—è ${chalk.underline(
      "production"
    )} —Ä–µ–∂–∏–º–∞ –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.`
  );
  console.log(
    `üîî –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: ${chalk.blueBright.bold(
      "npm run build"
    )}`
  );
  console.log();
}

function choosePort(host: string, defaultPort: number): Promise<number | null> {
  return detect(defaultPort).then(
    (port) => {
      return new Promise((resolve) => {
        if (defaultPort === port) {
          return resolve(port);
        }
        const message =
          process.platform !== "win32" && defaultPort < 1024 && !isRoot()
            ? +`–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É –Ω–∏–∂–µ 1024 —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
            : `–ß—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É: ${chalk.blue.bold(
                `${defaultPort}`
              )}.`;
        if (isInteractive) {
          //clearConsole()
          const existingProcess = getProcessForPort(defaultPort);
          const question: PromptsObjectType = {
            type: "confirm",
            name: "chouldChangePort",
            message:
              chalk.yellow(
                message +
                  `${existingProcess ? ` –í–µ—Ä–æ—è—Ç–Ω–æ:\n ${existingProcess}` : ""}`
              ) + "\n\n–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É?",
            initial: true,
          };
          prompts(question).then((answer) => {
            if (answer.chouldChangePort) {
              resolve(port);
            } else {
              resolve(null);
            }
          });
        } else {
          console.log(chalk.red(message));
          resolve(null);
        }
      });
    },
    (err) => {
      throw new Error(
        chalk.red(
          `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç –Ω–∞ —Ö–æ—Å—Ç–µ: ${chalk.bold(`${host}`)}`
        ) +
          "\n" +
          (`–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–µ—Ç–∏: ` + err.message || err) +
          "\n"
      );
    }
  );
}

function createCompiler({
  Webpack,
  config,
  appName,
  useTS,
  urls,
}: CreateCompilerFuncPropsType): AppCompiller {
  let compiller: AppCompiller;
  try {
    compiller = Webpack(config);
  } catch (err) {
    console.log(chalk.red("üö´ –ù–µ—É–¥–∞—á–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è!! üö´"));
    console.log();
    console.log();
    process.exit(1);
  }

  compiller.hooks.invalid.tap("invalid", () => {
    if (isInteractive) {
      //clearConsole()
      console.log(chalk.blackBright.bold("‚è≥ –ö–æ–º–ø–∏–ª—è—Ü–∏—è... ‚è≥"));
    }
  });

  let isFirstCompile: boolean = true;

  if (useTS) {
    forkTsCheckerWebpackPlugin
      .getCompilerHooks(compiller)
      .waiting.tap("awaitingTsCheck", () => {
        console.log();
        console.log(
          chalk.cyan(
            "‚è±  –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤... ‚è±"
          )
        );
        console.log();
      });
    forkTsCheckerWebpackPlugin
      .getCompilerHooks(compiller)
      .issues.tap("awaitingTsCheck", (issues) => {
        if (issues.length === 0) {
          console.log(
            chalk.blueBright.bold(
              "üéâ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –û—à–∏–±–æ–∫ —Ç–∏–ø–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ üéâ"
            )
          );
        } else {
          console.log(
            chalk.red.bold(
              `üîé –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –µ—â–µ —Ä–∞–∑ üîé`
            )
          );
          console.log();
        }
        return issues;
      });
  }

  compiller.hooks.done.tap("done", async (stats) => {
    if (isInteractive) {
      //cleatConsole()
    }

    const statsData = stats.toJson({
      all: false,
      errors: true,
      warnings: true,
    });

    const messages = formatWebpackMessages(statsData);

    const isSuccessFul = !messages.errors?.length && !messages.warns?.length;
    if (isSuccessFul) {
      console.log(chalk.green.bold(`üîÜ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üîÜ`));
    }

    if (isSuccessFul && (isInteractive || isFirstCompile)) {
      printInstruction(appName, urls);
    }

    isFirstCompile = false;

    if (messages.errors?.length) {
      console.log(
        chalk.red(`üö´‚ùå –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏... ‚ùåüö´\n`)
      );
      console.log(messages.errors.join("\n\n"));
      console.log();
      return;
    }
    if (messages.warns?.length) {
      console.log(
        chalk.yellow("üü† –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ üü†\n")
      );
      console.log(messages.warns.join("\n\n"));
      console.log(
        `\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ ${chalk.underline(
          chalk.yellow("–∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        )} .`
      );
      console.log();
    }
  });

  return compiller;
}

export { createCompiler, prepareUrls, choosePort };
