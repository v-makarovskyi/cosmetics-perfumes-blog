import path from "path";
import fs from "fs";

import chalk from "chalk";
import forkTsCheckerWebpackPlugin from "fork-ts-checker-webpack-plugin";

import { appPaths } from "../config/paths";
import { formatWebpackMessages } from "./formatWebpackMessages";

import type {
  CreateCompilerFuncPropsType,
  AppCompiller,
} from "../../types/webpack.types";

const isInteractive: boolean = process.stdout.isTTY;

function printInstruction({
  appName: string, //urls: any
}) {}

function prepareUrls() {}

function createCompiler({
  Webpack,
  config,
  appName,
  useTS,
}: CreateCompilerFuncPropsType): AppCompiller {
  let compiller: AppCompiller;
  try {
    compiller = Webpack(config);
  } catch (err) {
    console.log(chalk.red("üö´ –ù–µ—É–¥–∞—á–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è!! üö´"));
    console.log();
    console.log();
    process.exit(1);
  }

  compiller.hooks.invalid.tap("invalid", () => {
    if (isInteractive) {
      //clearConsole()
      console.log(chalk.blackBright.bold("‚è≥ –ö–æ–º–ø–∏–ª—è—Ü–∏—è... ‚è≥"));
    }
  });

  let isFirstCompile: boolean = true;

  if (useTS) {
    forkTsCheckerWebpackPlugin
      .getCompilerHooks(compiller)
      .waiting.tap("awaitingTsCheck", () => {
        console.log();
        console.log(
          chalk.cyan(
            "‚è±  –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤... ‚è±"
          )
        );
        console.log();
      })
      forkTsCheckerWebpackPlugin
      .getCompilerHooks(compiller)
      .issues.tap('awaitingTsCheck', (issues) => {
        if(issues.length === 0) {
          console.log(
            chalk.blueBright.bold('üéâ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –û—à–∏–±–æ–∫ —Ç–∏–ø–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ üéâ')
          )
        } else {
          console.log(
            chalk.red.bold(
              `üîé –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –µ—â–µ —Ä–∞–∑ üîé`
            )
          );
          console.log();
        }
        return issues
      })
      
}
  

  compiller.hooks.done.tap("done", async (stats) => {
    if (isInteractive) {
      //cleatConsole()
    }

    const statsData = stats.toJson({
      all: false,
      errors: true,
      warnings: true,
    });

    //console.log('statsData', statsData);

    const messages = formatWebpackMessages(statsData);

    const isSuccessFul = !messages.errors?.length && !messages.warns?.length;
    if (isSuccessFul) {
      console.log(chalk.green.bold(`üîÜ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üîÜ`));
    }

    if (isSuccessFul && (isInteractive || isFirstCompile)) {
      printInstruction({
        appName,
        //urls
      });
    }

    isFirstCompile = false;

    if (messages.errors?.length) {
      console.log(
        chalk.red(`üö´‚ùå –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏... ‚ùåüö´\n`)
      );
      console.log(messages.errors.join("\n\n"));
      console.log();
      return;
    }
    if (messages.warns?.length) {
      console.log(
        chalk.yellow("üü† –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ üü†\n")
      );
      console.log(messages.warns.join("\n\n"));
      console.log(
        `\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ ${chalk.underline(
          chalk.yellow("–∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        )} .`
      );
      console.log();
    }
  });

  return compiller;
}

export { createCompiler, prepareUrls };
