generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  name          String
  email         String         @unique
  password      String
  is_admin      Boolean        @default(false)
  refresh_token RefreshToken[]
  created_at    DateTime       @default(now()) @db.Timestamptz()
  updated_at    DateTime       @updatedAt @db.Timestamptz()
}

model RefreshToken {
  id           String   @id @unique @default(uuid())
  hashed_token String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked      Boolean  @default(false)
  created_at   DateTime @default(now()) @db.Timestamptz()
  updated_at   DateTime @updatedAt @db.Timestamptz()
  expire_at    DateTime @db.Timestamptz()
}

model Author {
  id         String  @id @default(uuid())
  first_name String  @db.VarChar(30)
  last_name  String  @db.VarChar(30)
  image_url  String?
  blogs      Blog[]

  @@unique(fields: [first_name, last_name], name: "authorUnique")
}

model Category {
  id         String   @id @default(uuid())
  title      String   @unique
  slug       String
  blogs      Blog[]
  created_at DateTime @default(now()) @db.Timestamptz()
}

model Blog {
  id          String   @id @default(uuid())
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  slug        String
  title       String   @unique
  main_image  String
  description String
  images      Image[]
  tags        Tag[]
  author      Author   @relation(fields: [authorId], references: [id])
  authorId    String
  read_time   String
  created_at  DateTime @default(now()) @db.Timestamptz()
  updated_at  DateTime @updatedAt @db.Timestamptz()
}

model Image {
  id        String   @id @default(uuid())
  url       String   @unique
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  loaded_at DateTime @default(now()) @db.Timestamptz()
}

model Tag {
  id   String @id @default(uuid())
  name String @unique
  blog Blog[]
}
